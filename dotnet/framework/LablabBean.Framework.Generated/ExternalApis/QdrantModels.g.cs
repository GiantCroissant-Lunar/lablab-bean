// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do one of these:
//
//    using LablabBean.Framework.Generated.Models.Qdrant;
//
//    var qdrantScoredPoint = QdrantScoredPoint.FromJson(jsonString);
//    var qdrantSearchRequest = QdrantSearchRequest.FromJson(jsonString);
//    var qdrantSearchResponse = QdrantSearchResponse.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace LablabBean.Framework.Generated.Models.Qdrant
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    /// <summary>
    /// Individual vector search result from Qdrant with score, ID, payload, and optional vector
    /// </summary>
    public partial class QdrantScoredPoint
    {
        /// <summary>
        /// Point identifier (can be string or integer in Qdrant API)
        /// </summary>
        [JsonPropertyName("id")]
        public Id Id { get; set; }

        /// <summary>
        /// Dynamic payload data (omitted if with_payload=false)
        /// </summary>
        [JsonPropertyName("payload")]
        public Dictionary<string, object> Payload { get; set; }

        /// <summary>
        /// Similarity score (0.0 to 1.0, higher is more similar)
        /// </summary>
        [JsonPropertyName("score")]
        [JsonConverter(typeof(PurpleMinMaxValueCheckConverter))]
        public double Score { get; set; }

        /// <summary>
        /// Vector embeddings (omitted if with_vector=false)
        /// </summary>
        [JsonPropertyName("vector")]
        public List<double> Vector { get; set; }
    }

    /// <summary>
    /// Request structure for Qdrant vector similarity search API
    /// </summary>
    public partial class QdrantSearchRequest
    {
        /// <summary>
        /// Filter conditions for search results
        /// </summary>
        [JsonPropertyName("filter")]
        public Dictionary<string, object> Filter { get; set; }

        /// <summary>
        /// Maximum number of results to return (topK)
        /// </summary>
        [JsonPropertyName("limit")]
        public long Limit { get; set; }

        /// <summary>
        /// Pagination offset
        /// </summary>
        [JsonPropertyName("offset")]
        public long? Offset { get; set; }

        /// <summary>
        /// Minimum similarity score filter
        /// </summary>
        [JsonPropertyName("score_threshold")]
        [JsonConverter(typeof(PurpleMinMaxValueCheckConverter))]
        public double? ScoreThreshold { get; set; }

        /// <summary>
        /// Query vector for similarity search
        /// </summary>
        [JsonPropertyName("vector")]
        public List<double> Vector { get; set; }

        /// <summary>
        /// Include payload in response
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("with_payload")]
        public bool? WithPayload { get; set; }

        /// <summary>
        /// Include vectors in response
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("with_vector")]
        public bool? WithVector { get; set; }
    }

    /// <summary>
    /// Response wrapper for Qdrant vector search API containing result array
    /// </summary>
    public partial class QdrantSearchResponse
    {
        /// <summary>
        /// Array of search results ordered by similarity score (descending)
        /// </summary>
        [JsonPropertyName("result")]
        public List<Result> Result { get; set; }

        /// <summary>
        /// Response status indicator
        /// </summary>
        [JsonPropertyName("status")]
        public Status Status { get; set; }

        /// <summary>
        /// Execution time in seconds
        /// </summary>
        [JsonPropertyName("time")]
        [JsonConverter(typeof(FluffyMinMaxValueCheckConverter))]
        public double? Time { get; set; }
    }

    public partial class Result
    {
        /// <summary>
        /// Point identifier (can be string or integer in Qdrant API)
        /// </summary>
        [JsonPropertyName("id")]
        public Id Id { get; set; }

        /// <summary>
        /// Dynamic payload data (omitted if with_payload=false)
        /// </summary>
        [JsonPropertyName("payload")]
        public Dictionary<string, object> Payload { get; set; }

        /// <summary>
        /// Similarity score (0.0 to 1.0, higher is more similar)
        /// </summary>
        [JsonPropertyName("score")]
        [JsonConverter(typeof(PurpleMinMaxValueCheckConverter))]
        public double Score { get; set; }

        /// <summary>
        /// Vector embeddings (omitted if with_vector=false)
        /// </summary>
        [JsonPropertyName("vector")]
        public List<double> Vector { get; set; }
    }

    /// <summary>
    /// Response status indicator
    /// </summary>
    public enum Status { Error, Ok };

    public partial struct Id
    {
        public long? Integer;
        public string String;

        public static implicit operator Id(long Integer) => new Id { Integer = Integer };
        public static implicit operator Id(string String) => new Id { String = String };
    }

    public partial class QdrantScoredPoint
    {
        public static QdrantScoredPoint FromJson(string json) => JsonSerializer.Deserialize<QdrantScoredPoint>(json, LablabBean.Framework.Generated.Models.Qdrant.Converter.Settings);
    }

    public partial class QdrantSearchRequest
    {
        public static QdrantSearchRequest FromJson(string json) => JsonSerializer.Deserialize<QdrantSearchRequest>(json, LablabBean.Framework.Generated.Models.Qdrant.Converter.Settings);
    }

    public partial class QdrantSearchResponse
    {
        public static QdrantSearchResponse FromJson(string json) => JsonSerializer.Deserialize<QdrantSearchResponse>(json, LablabBean.Framework.Generated.Models.Qdrant.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this QdrantScoredPoint self) => JsonSerializer.Serialize(self, LablabBean.Framework.Generated.Models.Qdrant.Converter.Settings);
        public static string ToJson(this QdrantSearchRequest self) => JsonSerializer.Serialize(self, LablabBean.Framework.Generated.Models.Qdrant.Converter.Settings);
        public static string ToJson(this QdrantSearchResponse self) => JsonSerializer.Serialize(self, LablabBean.Framework.Generated.Models.Qdrant.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                IdConverter.Singleton,
                StatusConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class IdConverter : JsonConverter<Id>
    {
        public override bool CanConvert(Type t) => t == typeof(Id);

        public override Id Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            switch (reader.TokenType)
            {
                case JsonTokenType.Number:
                    var integerValue = reader.GetInt64();
                    return new Id { Integer = integerValue };
                case JsonTokenType.String:
                    var stringValue = reader.GetString();
                    return new Id { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Id");
        }

        public override void Write(Utf8JsonWriter writer, Id value, JsonSerializerOptions options)
        {
            if (value.Integer != null)
            {
                JsonSerializer.Serialize(writer, value.Integer.Value, options);
                return;
            }
            if (value.String != null)
            {
                JsonSerializer.Serialize(writer, value.String, options);
                return;
            }
            throw new Exception("Cannot marshal type Id");
        }

        public static readonly IdConverter Singleton = new IdConverter();
    }

    internal class PurpleMinMaxValueCheckConverter : JsonConverter<double>
    {
        public override bool CanConvert(Type t) => t == typeof(double);

        public override double Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetDouble();
            if (value >= 0 && value <= 1)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type double");
        }

        public override void Write(Utf8JsonWriter writer, double value, JsonSerializerOptions options)
        {
            if (value >= 0 && value <= 1)
            {
                JsonSerializer.Serialize(writer, value, options);
                return;
            }
            throw new Exception("Cannot marshal type double");
        }

        public static readonly PurpleMinMaxValueCheckConverter Singleton = new PurpleMinMaxValueCheckConverter();
    }

    internal class StatusConverter : JsonConverter<Status>
    {
        public override bool CanConvert(Type t) => t == typeof(Status);

        public override Status Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "error":
                    return Status.Error;
                case "ok":
                    return Status.Ok;
            }
            throw new Exception("Cannot unmarshal type Status");
        }

        public override void Write(Utf8JsonWriter writer, Status value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Status.Error:
                    JsonSerializer.Serialize(writer, "error", options);
                    return;
                case Status.Ok:
                    JsonSerializer.Serialize(writer, "ok", options);
                    return;
            }
            throw new Exception("Cannot marshal type Status");
        }

        public static readonly StatusConverter Singleton = new StatusConverter();
    }

    internal class FluffyMinMaxValueCheckConverter : JsonConverter<double>
    {
        public override bool CanConvert(Type t) => t == typeof(double);

        public override double Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetDouble();
            if (value >= 0)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type double");
        }

        public override void Write(Utf8JsonWriter writer, double value, JsonSerializerOptions options)
        {
            if (value >= 0)
            {
                JsonSerializer.Serialize(writer, value, options);
                return;
            }
            throw new Exception("Cannot marshal type double");
        }

        public static readonly FluffyMinMaxValueCheckConverter Singleton = new FluffyMinMaxValueCheckConverter();
    }

    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
                get => _dateTimeStyles;
                set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
                get => _dateTimeFormat ?? string.Empty;
                set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
                get => _culture ?? CultureInfo.CurrentCulture;
                set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
                string text;


                if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                        || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
                {
                        value = value.ToUniversalTime();
                }

                text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

                writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                string? dateText = reader.GetString();

                if (string.IsNullOrEmpty(dateText) == false)
                {
                        if (!string.IsNullOrEmpty(_dateTimeFormat))
                        {
                                return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                        }
                        else
                        {
                                return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                        }
                }
                else
                {
                        return default(DateTimeOffset);
                }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
