# Pre-commit hooks configuration
# See https://pre-commit.com for more information
repos:
  # General file checks
- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v6.0.0
  hooks:
  - id: trailing-whitespace
    stages: [commit]
  - id: end-of-file-fixer
    stages: [commit]
  - id: check-yaml
    stages: [commit]
  - id: check-added-large-files
    stages: [commit]
  - id: check-merge-conflict
    stages: [commit]
  - id: check-case-conflict
    stages: [commit]
  - id: mixed-line-ending
    stages: [commit]
  - id: check-json
    stages: [commit]
  - id: check-toml
    stages: [commit]
  - id: detect-private-key
    stages: [commit]
  - id: pretty-format-json
    args: [--autofix, --indent, '2']
    stages: [commit]

  # Secret detection with gitleaks
- repo: https://github.com/gitleaks/gitleaks
  rev: v8.21.2
  hooks:
  - id: gitleaks
    args: [--source=., --config=.gitleaks.toml]
    stages: [commit]

  # Markdown linting
- repo: https://github.com/igorshubovych/markdownlint-cli
  rev: v0.45.0
  hooks:
  - id: markdownlint
    args: [--fix]
    stages: [commit]

  # YAML formatting
- repo: https://github.com/macisamuele/language-formatters-pre-commit-hooks
  rev: v2.15.0
  hooks:
  - id: pretty-format-yaml
    args: [--autofix, --indent, '2']
    stages: [commit]

  # Conventional Commits
- repo: https://github.com/compilerla/conventional-pre-commit
  rev: v4.3.0
  hooks:
  - id: conventional-pre-commit
    stages: [commit-msg]
    args: []

  # Python code quality - Ruff (replaces black, flake8, isort, and more)
- repo: https://github.com/astral-sh/ruff-pre-commit
  rev: v0.14.1
  hooks:
  - id: ruff
    args: [--fix]
    stages: [commit]
  - id: ruff-format
    stages: [commit]

  # Optional: Type checking with mypy
- repo: https://github.com/pre-commit/mirrors-mypy
  rev: v1.13.0
  hooks:
  - id: mypy
    additional_dependencies: [types-PyYAML]
    args: [--ignore-missing-imports, --no-strict-optional]
    stages: [commit]

  # Shell scripts: lint and format
- repo: https://github.com/shellcheck-py/shellcheck-py
  rev: v0.11.0.1
  hooks:
  - id: shellcheck
    args: [-S, error]
    files: ^(git-hooks/|scripts/).+\.(sh|bash)$
    stages: [commit]

- repo: https://github.com/scop/pre-commit-shfmt
  rev: v3.12.0-2
  hooks:
  - id: shfmt
    args: [-w, -i, '2']
    files: ^(git-hooks/|scripts/).+\.(sh|bash)$
    stages: [commit]

  # GitHub Actions workflow linter
- repo: https://github.com/rhysd/actionlint
  rev: v1.7.8
  hooks:
  - id: actionlint
    stages: [commit]

  # Web (website/) formatting via Prettier (+ Astro plugin)
- repo: https://github.com/pre-commit/mirrors-prettier
  rev: v4.0.0-alpha.8
  hooks:
  - id: prettier
    files: ^website/.*\.(js|jsx|ts|tsx|json|css|md|astro)$
    additional_dependencies:
    - prettier@^3.1.1
    - prettier-plugin-astro@^0.12.2
    stages: [commit]

  # Custom hooks (organized in git-hooks/ directory)
- repo: local
  hooks:
  - id: prevent-nul-file
    name: Prevent Windows nul file
    entry: python git-hooks/checks/general/prevent_nul_file.py
    language: system
    pass_filenames: false
    always_run: true
    stages: [commit]

  - id: validate-pointer-files
    name: Validate agent pointer files
    entry: python git-hooks/checks/general/validate_agent_pointers.py
    language: system
    pass_filenames: false
    files: ^(.agent/|CLAUDE\.md|AGENTS\.md|\.github/copilot-instructions\.md|\.windsurf/rules\.md)
    always_run: false
    stages: [commit]

  - id: organize-scattered-docs
    name: Detect scattered documentation files
    entry: python git-hooks/checks/general/organize_scattered_docs.py
    language: system
    pass_filenames: false
    files: \.md$
    exclude: ^(docs/|README\.md|CHANGELOG\.md|CONTRIBUTING\.md|LICENSE\.md|AGENTS\.md|CLAUDE\.md)
    always_run: false
    stages: [commit]

      # .NET specific checks (uncomment if working with .NET code)
      # - id: dotnet-format
      #   name: .NET Format Check
      #   entry: bash git-hooks/checks/dotnet/dotnet-format-check
      #   language: system
      #   files: \.(cs|csproj|sln)$
      #   pass_filenames: false

      # - id: one-type-per-file
      #   name: One Type Per File Check
      #   entry: bash git-hooks/checks/dotnet/one-type-per-file-check
      #   language: system
      #   files: \.cs$
      #   pass_filenames: false

      # Python code quality (alternative to ruff repos above)
      # Uncomment to use git-hooks/python-check instead of individual tools
      # - id: python-check
      #   name: Python code quality
      #   entry: bash git-hooks/checks/python/python-check
      #   language: system
      #   types: [python]
      #   pass_filenames: false
