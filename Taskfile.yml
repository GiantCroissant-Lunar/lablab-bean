version: '3'

tasks:
  build:
    desc: Build using NUKE default target (Compile)
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1

  build:console:
    desc: Build console app via NUKE (Compile)
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target Compile --configuration Debug

  build:windows:
    desc: Build Windows app via NUKE (PublishWindows or Compile if configured)
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target PublishWindows --configuration Debug

  build:restore:
    desc: Restore via NUKE
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target Restore

  publish:
    desc: Publish console and windows apps into build/_artifacts/<version>/publish
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target PublishAll --configuration Debug

  nuget:pack:
    desc: Build, pack and sync NuGet packages into versioned artifacts and local feed
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target SyncNugetLocal --configuration Release

  run:media-player:
    desc: Run the media player from versioned artifact
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File run-media-player.ps1 {{.CLI_ARGS}}

  release:
    desc: Full release packaging (includes website copy; may require website build)
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target Release --configuration Release

  build:artifacts:
    desc: Compile then publish (shortcut for build + publish)
    cmds:
    - task: build
    - task: publish

  test:
    desc: Run all tests via NUKE
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target Test --configuration Debug

  test:coverage:
    desc: Run tests with code coverage
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target TestWithCoverage --configuration Debug

  reports:
    desc: Generate HTML and CSV reports (builds, session, plugin metrics)
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target GenerateReports --configuration Debug

  reports:ci:
    desc: Run tests with coverage and generate all reports (full CI workflow)
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target TestWithCoverage --configuration Debug
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target GenerateReports --configuration Debug

  clean:
    desc: Clean all build artifacts via NUKE
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target Clean

  scc:
    desc: Run scc (code counter) on the repository
    cmds:
    - scc .

  docs:organize:
    desc: Analyze documentation organization (dry-run)
    cmds:
    - python git-hooks/checks/python/organize_docs.py --dry-run

  docs:organize:auto:
    desc: Automatically organize scattered documentation files
    cmds:
    - python git-hooks/checks/python/organize_docs.py --auto-move

  docs:validate:
    desc: Validate documentation schema and generate registry
    cmds:
    - python scripts/validate_docs.py

  docs:check:
    desc: Check documentation organization and validation
    cmds:
    - task: docs:organize
    - task: docs:validate
  docs:status:
    desc: Quick status of documentation organization (no validation)
    cmds:
    - python git-hooks/checks/python/organize_docs.py --dry-run

  dotnet:format:
    desc: Format .NET code using dotnet format
    dir: dotnet
    cmds:
    - dotnet format
  dotnet:analyze:
    desc: Analyze .NET code using Roslynator
    dir: dotnet
    cmds:
    - dotnet roslynator analyze --severity-level info
  dotnet:check:
    cmds:
    - task: dotnet:format
    - task: dotnet:analyze

  format:
    desc: Verify formatting and analyzers via NUKE
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target FormatCheck --configuration Debug
  analyze:
    desc: Run analyzer fixes and build via NUKE
    cmds:
    - pwsh -NoProfile -ExecutionPolicy Bypass -File build/nuke/build.ps1 --target Analyze --configuration Debug
  dev:
    desc: Start dev orchestration via .NET Aspire (web + pty)
    env:
      NUKE_TARGET: '{{ .NUKE_TARGET | default "Compile" }}'
      ASPIRE_LAUNCH_WEZTERM: '0'
      ASPIRE_DASHBOARD_ENABLED: '1'
      DOTNET_ASPIRE_DASHBOARD_ENABLED: '1'
    cmds:
    - |
      pwsh -NoProfile -Command "
        $asp = Join-Path $env:USERPROFILE '.dotnet\tools\aspire.exe';
        if (Test-Path $asp) { & $asp run --project dotnet/apphost/LablabBean.AppHost } else { aspire run --project dotnet/apphost/LablabBean.AppHost }
      "

  aspire:wezterm:
    desc: Start AppHost and allow WezTerm launcher (set ASPIRE_LAUNCH_WEZTERM=1). Optional WEZTERM_PATH to set portable path.
    env:
      NUKE_TARGET: '{{ .NUKE_TARGET | default "PublishAll" }}'
      LABLAB_WEZTERM_PATH: '{{ .WEZTERM_PATH }}'
      LABLAB_ARTIFACT_DIR: '{{ .ART_DIR }}'
      ASPIRE_DASHBOARD_ENABLED: '1'
      DOTNET_ASPIRE_DASHBOARD_ENABLED: '1'
    cmds:
    - |
      pwsh -NoProfile -Command "
        # Prefer repo tools\wezterm if LABLAB_WEZTERM_PATH not explicitly provided
        if (-not $env:LABLAB_WEZTERM_PATH) {
          $toolsWez = Join-Path 'tools' 'wezterm\wezterm.exe';
          if (Test-Path $toolsWez) { $env:LABLAB_WEZTERM_PATH = (Resolve-Path $toolsWez).Path; Write-Host ('Using WezTerm (tools): ' + $env:LABLAB_WEZTERM_PATH) }
        }
        $asp = Join-Path $env:USERPROFILE '.dotnet\tools\aspire.exe';
        if (Test-Path $asp) { & $asp run --project dotnet/apphost/LablabBean.AppHost } else { aspire run --project dotnet/apphost/LablabBean.AppHost }
      "

  aspire:wezterm:auto:
    desc: Start AppHost with WezTerm launcher, auto-detect portable wezterm.exe under build/_artifacts
    env:
      NUKE_TARGET: '{{ .NUKE_TARGET | default "PublishAll" }}'
      ASPIRE_LAUNCH_WEZTERM: '1'
      ASPIRE_DASHBOARD_ENABLED: '1'
      DOTNET_ASPIRE_DASHBOARD_ENABLED: '1'
    cmds:
    - |
      pwsh -NoProfile -Command "
        # Prefer repo tools\wezterm if exists; else detect portable WezTerm under artifacts
        $toolsWez = Join-Path 'tools' 'wezterm\wezterm.exe';
        if (Test-Path $toolsWez) {
          $env:LABLAB_WEZTERM_PATH = (Resolve-Path $toolsWez).Path; Write-Host ('Using WezTerm (tools): ' + $env:LABLAB_WEZTERM_PATH);
        } else {
          $wez = Get-ChildItem -Path 'build\_artifacts' -Recurse -Filter 'wezterm.exe' -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1;
          if (-not $wez) { Write-Host 'wezterm.exe not found under build\_artifacts'; } else { Write-Host ('Using WezTerm (artifacts): ' + $wez.FullName); $env:LABLAB_WEZTERM_PATH = $wez.FullName };
        }
        # Detect latest artifact version directory
        $artRoot = Join-Path -Path 'build' -ChildPath '_artifacts';
        if (Test-Path $artRoot) {
          $verDir = Get-ChildItem $artRoot -Directory | Sort-Object LastWriteTime -Descending | Select-Object -First 1;
          if ($null -ne $verDir) { $env:LABLAB_ARTIFACT_DIR = $verDir.FullName; Write-Host ('Using Artifact Dir: ' + $env:LABLAB_ARTIFACT_DIR) }
        }
        $asp = Join-Path $env:USERPROFILE '.dotnet\tools\aspire.exe';
        if (Test-Path $asp) { & $asp run --project dotnet/apphost/LablabBean.AppHost } else { aspire run --project dotnet/apphost/LablabBean.AppHost }
      "
