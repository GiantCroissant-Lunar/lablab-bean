# https://taskfile.dev

version: '3'

vars:
  PROJECT_NAME: lablab-bean
  OUTPUT_DIR: ./generated
  SCRIPTS_DIR: ./scripts
  DOTNET_DIR: ./dotnet
  WEBSITE_DIR: ./website
  BUILD_DIR: ./build/nuke
  ARTIFACTS_DIR: ./build/_artifacts

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  install:
    desc: Install project dependencies and tools
    cmds:
      - task: install-tools

  install-tools:
    desc: Install development tools
    cmds:
      - echo "Installing pre-commit..."
      - pip install pre-commit || echo "‚ö† pre-commit installation skipped (pip not available)"
      - echo "‚úì Tools installation complete"

  init:
    desc: Initialize the project
    cmds:
      - task: install
      - task: pre-commit-install
      - echo "‚úì Project initialized successfully"

  validate-yaml:
    desc: Validate YAML files
    cmds:
      - echo "Validating YAML files..."
      - pre-commit run check-yaml --all-files || echo "‚ö† YAML validation found issues"

  validate-markdown:
    desc: Validate Markdown files
    cmds:
      - echo "Validating Markdown files..."
      - pre-commit run markdownlint --all-files || echo "‚ö† Markdown validation found issues"

  format:
    desc: Format all files
    cmds:
      - echo "Formatting files..."
      - pre-commit run pretty-format-yaml --all-files || true
      - pre-commit run markdownlint --all-files || true
      - echo "‚úì Formatting complete"

  check:
    desc: Run all checks
    cmds:
      - task: validate-yaml
      - task: validate-markdown
      - echo "‚úì All checks passed"

  clean:
    desc: Clean generated files and artifacts
    cmds:
      - echo "Cleaning generated files..."
      - rm -rf {{.OUTPUT_DIR}}
      - echo "‚úì Clean complete"

  pre-commit-install:
    desc: Install pre-commit hooks
    cmds:
      - echo "Installing pre-commit hooks..."
      - pre-commit install
      - pre-commit install --hook-type commit-msg
      - echo "‚úì Pre-commit hooks installed"

  pre-commit-run:
    desc: Run pre-commit hooks on all files
    cmds:
      - echo "Running pre-commit hooks..."
      - pre-commit run --all-files

  pre-commit-update:
    desc: Update pre-commit hooks
    cmds:
      - echo "Updating pre-commit hooks..."
      - pre-commit autoupdate
      - echo "‚úì Pre-commit hooks updated"

  speck-init:
    desc: Initialize speck-kit directories
    cmds:
      - echo "Initializing speck-kit..."
      - mkdir -p {{.TEMPLATES_DIR}}
      - mkdir -p {{.OUTPUT_DIR}}
      - echo "‚úì Speck-kit directories created"

  speck-generate:
    desc: "Generate from speck-kit template (usage: task speck-generate TEMPLATE=name OUTPUT=file)"
    cmds:
      - echo "Generating from template {{.TEMPLATE}}..."
      - echo "Output{{.OUTPUT_DIR}}/{{.OUTPUT}}"
      - echo "‚ö† Template generation requires custom implementation"

  docker-build:
    desc: Build Docker image
    cmds:
      - echo "Building Docker image..."
      - docker build -t {{.PROJECT_NAME}}:latest .
      - echo "‚úì Docker image built"

  docker-run:
    desc: Run Docker container
    cmds:
      - docker run --rm -it {{.PROJECT_NAME}}:latest

  docker-compose-up:
    desc: Start services with docker-compose
    cmds:
      - docker-compose up -d
      - echo "‚úì Services started"

  docker-compose-down:
    desc: Stop services with docker-compose
    cmds:
      - docker-compose down
      - echo "‚úì Services stopped"

  docker-compose-logs:
    desc: View docker-compose logs
    cmds:
      - docker-compose logs -f

  # NUKE Build Tasks
  nuke-build:
    desc: Build .NET solution using NUKE
    dir: "{{.BUILD_DIR}}"
    cmds:
      - dotnet run --project Build.csproj -- Compile

  nuke-clean:
    desc: Clean .NET solution using NUKE
    dir: "{{.BUILD_DIR}}"
    cmds:
      - dotnet run --project Build.csproj -- Clean

  nuke-test:
    desc: Test .NET solution using NUKE
    dir: "{{.BUILD_DIR}}"
    cmds:
      - dotnet run --project Build.csproj -- Test

  nuke-publish:
    desc: Publish .NET solution using NUKE
    dir: "{{.BUILD_DIR}}"
    cmds:
      - dotnet run --project Build.csproj -- Publish

  nuke-publish-console:
    desc: Publish console app using NUKE
    dir: "{{.BUILD_DIR}}"
    cmds:
      - dotnet run --project Build.csproj -- PublishConsole

  nuke-publish-windows:
    desc: Publish windows app using NUKE
    dir: "{{.BUILD_DIR}}"
    cmds:
      - dotnet run --project Build.csproj -- PublishWindows

  nuke-version:
    desc: Print GitVersion information
    cmds:
      - dotnet run --project {{.BUILD_DIR}}/Build.csproj -- PrintVersion

  nuke-release:
    desc: Build complete release with versioned artifacts
    cmds:
      - dotnet run --project {{.BUILD_DIR}}/Build.csproj -- Release

  # .NET Tasks
  dotnet-build:
    desc: Build .NET solution
    dir: "{{.DOTNET_DIR}}"
    cmds:
      - dotnet build

  dotnet-clean:
    desc: Clean .NET solution
    dir: "{{.DOTNET_DIR}}"
    cmds:
      - dotnet clean

  dotnet-restore:
    desc: Restore .NET solution
    dir: "{{.DOTNET_DIR}}"
    cmds:
      - dotnet restore

  dotnet-format:
    desc: Format .NET code
    dir: "{{.DOTNET_DIR}}"
    cmds:
      - dotnet format

  dotnet-run-console:
    desc: Run console app
    dir: "{{.DOTNET_DIR}}/console-app/LablabBean.Console"
    cmds:
      - dotnet run

  dotnet-run-windows:
    desc: Run windows app
    dir: "{{.DOTNET_DIR}}/windows-app/LablabBean.Windows"
    cmds:
      - dotnet run

  # Website/PM2 Tasks
  website-install:
    desc: Install website dependencies
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm install

  website-dev:
    desc: Start website dev server
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm dev

  website-build:
    desc: Build website with GitVersion
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pwsh -File build.ps1

  # Development Stack Tasks (Hot Reload)
  dev-stack:
    desc: Start development stack with hot reload (Astro dev + PTY + Console)
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - echo "üöÄ Starting development stack with hot reload..."
      - pnpm pm2:dev
      - echo ""
      - echo "‚úì Development stack started!"
      - echo ""
      - echo "üåê Web App: http://localhost:3000 (hot reload enabled)"
      - echo "üìä Use 'task dev-status' to check status"
      - echo "üìã Use 'task dev-logs' to view logs"
      - echo "üõë Use 'task dev-stop' to stop the stack"

  dev-stop:
    desc: Stop development stack
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - echo "üõë Stopping development stack..."
      - pnpm pm2:dev-stop
      - echo "‚úì Development stack stopped"

  dev-restart:
    desc: Restart development stack
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - echo "üîÑ Restarting development stack..."
      - pnpm pm2:dev-restart
      - echo "‚úì Development stack restarted"

  dev-status:
    desc: Show development stack status
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm pm2:status

  dev-logs:
    desc: Show development stack logs (live)
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm pm2:logs

  dev-delete:
    desc: Delete development stack from PM2
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - echo "üóëÔ∏è  Deleting development stack from PM2..."
      - pnpm pm2:dev-delete
      - echo "‚úì Development stack deleted from PM2"

  # Build Tasks (compound commands)
  build:
    desc: Build all components for development (dotnet only, website uses hot reload)
    cmds:
      - echo "üî® Building development components..."
      - task: build-dotnet
      - echo "‚úì Development build complete (website will use hot reload)"

  build-dotnet:
    desc: Build .NET projects using NUKE
    cmds:
      - echo "üî® Building .NET projects..."
      - task: nuke-build
      - echo "‚úì .NET build complete"

  build-website:
    desc: Build website for production
    cmds:
      - echo "üåê Building website for production..."
      - task: website-build
      - echo "‚úì Website build complete"

  # Release Stack Tasks (using versioned artifacts)
  build-release:
    desc: Build complete release with versioned artifacts
    cmds:
      - echo "üî® Building release with versioned artifacts..."
      - task: build-website
      - task: nuke-release
      - echo "‚úì Release built successfully"
      - echo ""
      - echo "üì¶ Artifacts location{{.ARTIFACTS_DIR}}"
      - cmd: powershell -Command "Get-ChildItem -Path '{{.ARTIFACTS_DIR}}' -Directory | Select-Object Name, LastWriteTime"
        ignore_error: true

  list-versions:
    desc: List all available versioned artifacts
    cmds:
      - echo "üì¶ Available versions:"
      - cmd: powershell -Command "Get-ChildItem -Path '{{.ARTIFACTS_DIR}}' -Directory | Select-Object Name, LastWriteTime | Format-Table -AutoSize"
        ignore_error: true

  show-version:
    desc: Show the current version that will be used
    cmds:
      - cmd: node -e "const cfg = require('./ecosystem.config.js'); console.log('Current version:', cfg.apps[0].env.LABLAB_VERSION);"
        ignore_error: true

  stack-run:
    desc: Start production stack from versioned artifacts (PRODUCTION MODE)
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - echo "üöÄ Starting production stack from versioned artifacts..."
      - pnpm pm2:prod
      - echo ""
      - echo "‚úì Production stack started successfully!"
      - echo ""
      - echo "üìä Use 'task stack-status' to check status"
      - echo "üìã Use 'task stack-logs' to view logs"
      - echo "üõë Use 'task stack-stop' to stop the stack"
      - echo "üß™ Use 'task test-web' to run Playwright tests"

  stack-stop:
    desc: Stop all PM2 processes
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - echo "üõë Stopping all PM2 processes..."
      - pnpm pm2 stop all
      - echo "‚úì All processes stopped"

  stack-restart:
    desc: Restart production stack
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - echo "üîÑ Restarting production stack..."
      - pnpm pm2:prod-restart
      - echo "‚úì Production stack restarted"

  stack-status:
    desc: Show PM2 stack status
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm pm2:status

  stack-logs:
    desc: Show PM2 stack logs (live)
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm pm2:logs

  stack-logs-web:
    desc: Show web app logs only
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm pm2 logs lablab-web

  stack-logs-console:
    desc: Show console app logs only
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm pm2 logs lablab-console

  stack-delete:
    desc: Delete all PM2 processes
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - echo "üóëÔ∏è  Deleting all PM2 processes..."
      - pnpm pm2 delete all
      - echo "‚úì All processes deleted from PM2"

  stack-monit:
    desc: Monitor stack with PM2 dashboard
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm pm2:monit

  # Full workflow
  release-and-run:
    desc: Build release and start the full stack (complete workflow)
    cmds:
      - task: build-release
      - echo ""
      - echo "‚è≥ Waiting 2 seconds before starting..."
      - cmd: timeout /t 2 /nobreak
        platforms: [windows]
      - cmd: sleep 2
        platforms: [linux, darwin]
      - task: stack-run

  release-test:
    desc: Build, start, wait, and show status (for testing)
    cmds:
      - task: build-release
      - task: stack-run
      - echo ""
      - echo "‚è≥ Waiting 5 seconds for startup..."
      - cmd: timeout /t 5 /nobreak
        platforms: [windows]
      - cmd: sleep 5
        platforms: [linux, darwin]
      - task: stack-status

  # Testing Tasks
  test-install:
    desc: Install Playwright browsers
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm exec playwright install

  test-web:
    desc: Run Playwright tests against the web app
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - echo "üß™ Running Playwright tests..."
      - pnpm test

  test-web-ui:
    desc: Run Playwright tests in UI mode
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm test:ui

  test-web-headed:
    desc: Run Playwright tests in headed mode
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm test:headed

  test-web-debug:
    desc: Run Playwright tests in debug mode
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm test:debug

  test-report:
    desc: Show Playwright test report
    dir: "{{.WEBSITE_DIR}}"
    cmds:
      - pnpm test:report

  test-full:
    desc: Build, start stack, run tests, and generate report
    cmds:
      - task: build-release
      - task: stack-run
      - echo "‚è≥ Waiting 10 seconds for stack to be ready..."
      - cmd: timeout /t 10 /nobreak
        platforms: [windows]
      - cmd: sleep 10
        platforms: [linux, darwin]
      - task: test-web
      - task: test-report
      - echo ""
      - echo "‚úì Tests complete! Check test reports in build/_artifacts/<version>/test-reports/"

  # JetBrains CLI Tasks
  jb-inspect:
    desc: Run JetBrains CLI code inspection (slow)
    dir: "{{.DOTNET_DIR}}"
    cmds:
      - echo "Running JetBrains CLI inspection..."
      - echo "This may take several minutes..."
      - jb inspectcode LablabBean.sln --output=../artifacts/inspection-results.xml || echo "‚ö† JetBrains CLI not found or inspection failed"

  jb-cleanup:
    desc: Run JetBrains CLI code cleanup
    dir: "{{.DOTNET_DIR}}"
    cmds:
      - jb cleanupcode LablabBean.sln || echo "‚ö† JetBrains CLI not found"

  help:
    desc: Show help
    cmds:
      - task --list

  info:
    desc: Show project information
    cmds:
      - echo "Project{{.PROJECT_NAME}}"
      - echo "Output{{.OUTPUT_DIR}}"
      - echo "Dotnet{{.DOTNET_DIR}}"
      - echo "Website{{.WEBSITE_DIR}}"
      - echo ""
      - echo "Run task --list to see all available tasks"
